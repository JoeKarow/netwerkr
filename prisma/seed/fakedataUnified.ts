import { faker } from '@faker-js/faker'

import { Prisma, PrismaClient } from '@prisma/client'

// SocialMediaCreateWithoutContactInput

const fakeInteractionMax = 15

/**
 * It returns an object with four properties, three of which are generated by the faker library
 * @returns An object with the following properties:
 * 	firstName: a random first name
 * 	lastName: a random last name
 * 	photo: a random avatar
 * 	onTwitterList: false
 */
const fakeContact = () => {
	return {
		firstName: faker.name.firstName(),
		lastName: faker.name.lastName(),
		photo: faker.image.avatar(),
		onTwitterList: false,
	}
}

/**
 * It generates a random number of fake emails, and returns them as an array
 * @param {number} max - number - The maximum number of emails to generate
 * @returns An array of objects with two properties: email and label.
 */
const fakeEmail = (max: number) => {
	const result = []
	for (let i = 0; i < faker.mersenne.rand(1, max); i++) {
		result.push({
			email: faker.internet.email(),
			label: faker.helpers.arrayElement([
				'Home',
				'Work',
				'Other',
			]) as Prisma.EnumEmailLabelFilter,
		})
	}
	return result
}

/**
 * It generates a random number of phone numbers, and returns them as an array
 * @param {number} max - number - The maximum number of phone numbers to generate.
 * @returns An array of objects with a number and label property.
 */
const fakePhone = (max: number) => {
	const result = []
	for (let i = 0; i < faker.mersenne.rand(1, max); i++) {
		result.push({
			number: faker.phone.number('###-###-####'),
			label: faker.helpers.arrayElement([
				'Home',
				'Work',
				'Mobile',
				'Other',
			]) as Prisma.EnumPhoneLabelFilter,
		})
	}
	return result
}

/**
 * It takes a first name, last name, and an array of service ids, and returns a
 * Prisma.SocialMediaCreateWithoutContactInput object
 * @param {string} first - string - The first name of the contact
 * @param {string} last - string,
 * @param {string[]} ids - string[] - this is an array of service ids that we'll use to connect the
 * social media to a service
 * @returns A SocialMediaCreateWithoutContactInput object
 */
const fakeSocial = (first: string, last: string, ids: string[]) => {
	const serviceId = faker.helpers.arrayElement(ids)
	return {
		userId: faker.random.numeric(7),
		displayName: `${first} ${last}`,
		username: faker.internet.userName(first, last),
		socialMediaServiceId: serviceId,
		protected: false,
		profileImg: faker.internet.avatar(),
	}
}

/**
 * It generates a random number of fake interactions, each with a random source, time, and content
 * @param {number} max - number - the maximum number of interactions to generate
 * @returns An array of objects with the following properties:
 * 	source: a random element from the array of strings
 * 	time: a random date in the past
 * 	content: a random sentence
 */
const fakeInteraction = (max: number, socialMediaIds: string[]) => {
	const result = []
	for (let i = 0; i < faker.mersenne.rand(1, max); i++) {
		result.push({
			source: faker.helpers.arrayElement([
				'Twitter',
				'LinkedIn',
				'PhoneCall',
				'SMS',
				'Email',
				'DM',
				'InPerson',
			]),
			time: faker.date.past(),
			content: faker.lorem.sentences(),
			socialMediaServiceId: faker.helpers.arrayElement(socialMediaIds),
		})
	}
	return result
}
interface FakeContactProps {
	associatedId: string
	socialMediaIds: string[]
}

/**
 * It creates a fake contact, fake email, fake phone, and fake interaction, and then returns a
 * Prisma.ContactUncheckedCreateInput object with all of those values
 * @param {FakeContactProps}  - FakeContactProps
 * @returns An array of objects
 */
export const generateFakeContact = ({
	associatedId,
	socialMediaIds,
}: FakeContactProps): Prisma.ContactUncheckedCreateInput => {
	const contact = fakeContact()
	const email = fakeEmail(3) as Prisma.ContactEmailCreateManyContactInput[]
	const phone = fakePhone(3) as Prisma.ContactPhoneCreateManyContactInput[]
	const interactions = fakeInteraction(
		fakeInteractionMax,
		socialMediaIds
	) as Prisma.InteractionsCreateManyContactInput[]
	const socialMedia = fakeSocial(
		contact.firstName,
		contact.lastName,
		socialMediaIds
	)

	return {
		...contact,
		associatedUserId: associatedId,
		socialMedia: {
			createMany: {
				data: socialMedia,
			},
		},
		email: { createMany: { data: email } },
		phone: { createMany: { data: phone } },
		interactions: { createMany: { data: interactions } },
	}
	// console.log( result[ i ] )
}
